{"version":3,"sources":["components/checkbox.js","templates/questionnaire.js","App.js","serviceWorker.js","index.js"],"names":["SimpleCheckbox","_ref","value","label","react_default","a","createElement","Label","check","className","Input","type","id","mapQuestionsToCheckboxes","questions","map","question","components_checkbox","name","key","investorAccreditedQuestionnaire","Questionnaire","Row","style","maxWidth","Col","App","questionnaire","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sNAaeA,EATQ,SAAAC,GAAA,IACnBC,EADmBD,EACnBC,MAAOC,EADYF,EACZE,MADY,OAGfC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,OAAK,EAACC,UAAU,QACnBL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAOC,KAAK,WAAWC,GAAG,YAAYV,MAAOA,IAC7CE,EAAAC,EAAAC,cAAA,QAAMG,UAAU,QAAQN,qBCL9BU,EAA2B,SAC7BC,GAD6B,OAG7BA,EAAUC,IAAI,SAAAC,GAAQ,OAClBZ,EAAAC,EAAAC,cAACW,EAAD,CACId,MAAOa,EAASb,MAChBe,KAAMF,EAASE,KACfC,IAAKH,EAASE,UAIpBE,EACQ,CACN,CACIjB,MAAK,kPAGLe,KAAM,MAEV,CACIf,MAAK,+IAELe,KAAM,MAEV,CACIf,MAAK,gJAELe,KAAM,OAhBZE,EAmBQ,CACN,CACIjB,MAAK,0MAGLe,KAAM,MAEV,CACIf,MAAK,8FAELe,KAAM,MAEV,CACIf,MAAK,mKAGLe,KAAM,OAnCZE,EAsCqB,CACnB,CACIjB,MAAO,+CACPe,KAAM,OAyCHG,EApCO,kBAClBjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAKC,MAAO,CAAEC,SAAU,WACpBpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAKhB,UAAU,sBACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACXL,EAAAC,EAAAC,cAAA,kCAIJF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aAAf,iIAKAL,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAKhB,UAAU,QACXL,EAAAC,EAAAC,cAAA,8CAECO,EACGO,GAEJhB,EAAAC,EAAAC,cAAA,uFAKCO,EACGO,GAEJhB,EAAAC,EAAAC,cAAA,qCACCO,EACGO,aC3ELM,MAXf,WACE,OACEtB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAAlB,iBAGAL,EAAAC,EAAAC,cAACqB,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.75d82213.chunk.js","sourcesContent":["import React from 'react';\nimport { Label, Input } from 'reactstrap';\n\n\nconst SimpleCheckbox = ({\n    value, label\n}) => (\n        <Label check className=\"ml-4\">\n            <Input type=\"checkbox\" id=\"checkbox2\" value={value} />\n            <span className=\"ml-1\">{label}</span>\n        </Label>\n    );\n\nexport default SimpleCheckbox;","import React from 'react';\nimport SimpleCheckbox from '../components/checkbox';\nimport { Row, Col } from 'reactstrap';\n\nconst mapQuestionsToCheckboxes = (\n    questions,\n) =>\n    questions.map(question => (\n        <SimpleCheckbox\n            label={question.label}\n            name={question.name}\n            key={question.name}\n        />\n    ));\n\nconst investorAccreditedQuestionnaire = {\n    investor: [\n        {\n            label: `I have earned an individual income of more than $200,000 per year,\n                or a joint spousal income of more than $300,000 per year, in each of the \n                last two years, and expect to maintain the same level of income.`,\n            name: 'q1',\n        },\n        {\n            label: `I have a current net worth exceeding $1,000,000, either individually or \n          jointly with my spouse (excluding my primary residence).`,\n            name: 'q2',\n        },\n        {\n            label: `I am a general partner, executive officer, director, or a related \n          combination thereof for the issuer of a security being offered.`,\n            name: 'q3',\n        },\n    ],\n    business: [\n        {\n            label: `The entity is a bank, insurance company, registered investment \n                            company, business development company, or small business \n                            investment company.`,\n            name: 'q1',\n        },\n        {\n            label: `The entity is a business in which all the equity owners \n        are accredited investors.`,\n            name: 'q2',\n        },\n        {\n            label: `The entity is an employee benefit plan, a trust, charitable \n        organization, partnership, or company with total assets \n        in excess of $5,000,000.`,\n            name: 'q3',\n        },\n    ],\n    nonAccreditedInvestor: [\n        {\n            label: 'None of the categories above are applicable.',\n            name: 'q1',\n        },\n    ],\n};\n\nconst Questionnaire = () => (\n    <Row style={{ maxWidth: '1000px' }}>\n        <Col className=\"questionnaire-body\">\n            <div className=\"mb-4 ml-3\">\n                <span>\n                    Investing Entity:\n                          </span>\n            </div>\n            <div className=\"mb-4 ml-3\">\n                By checking the box(es) below and signing your name,\n                you declare that all your statements in this form are\n                true and complete.\n                        </div>\n            <Col className=\"pl-5\">\n                <h6>Accredited Investor - Individual</h6>\n\n                {mapQuestionsToCheckboxes(\n                    investorAccreditedQuestionnaire.investor\n                )}\n                <h6>\n                    Accredited Investor - Business Entity\n                    (corporations, LLC's, trusts, etc.)\n                            </h6>\n\n                {mapQuestionsToCheckboxes(\n                    investorAccreditedQuestionnaire.business\n                )}\n                <h6>Non-Accredited Investor</h6>\n                {mapQuestionsToCheckboxes(\n                    investorAccreditedQuestionnaire.nonAccreditedInvestor\n                )}\n            </Col>\n        </Col>\n    </Row>\n)\n\nexport default Questionnaire;","import React from 'react';\nimport Questionnaire from './templates/questionnaire';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Questionnaire\n      </header>\n      <Questionnaire />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}